{"ast":null,"code":"var _jsxFileName = \"/Users/robinjack/Documents/Repositories/react-nanodegree/reactnd-would-you-rather/src/components/Question.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport authedUser from \"../reducers/authedUser\";\nimport { Link } from \"react-router-dom\";\nimport { questionScore, formatPercentage } from \"../utilities/questionUtilities\";\nimport { handleAddAnswer } from \"../actions/answers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Question extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showVotes: false,\n      userHasVoted: false\n    };\n\n    this.numPeopleVotedForOption = (question, option) => {\n      return question[option].votes.length;\n    };\n\n    this.userHasVoted = () => {\n      let voted = this.props.authedUserQuestions.filter(q => q === this.props.question.id).length > 0;\n      return voted;\n    };\n\n    this.optionVoted = option => {\n      return this.props.question[option].votes.filter(a => a === this.props.authedUser).length > 0;\n    };\n\n    this.handleVote = option => {\n      return e => {\n        console.log(\"PROPS OF VOTING: \", this.props);\n        e.preventDefault();\n        const {\n          questionId,\n          authedUser,\n          dispatch\n        } = this.props;\n        dispatch(handleAddAnswer({\n          authedUser,\n          qid: questionId,\n          answer: option\n        }));\n        this.setState({\n          showVotes: true,\n          userHasVoted: true\n        });\n      };\n    };\n  }\n\n  render() {\n    const {\n      user,\n      question\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/question/${question.id}`,\n      className: 'question',\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: 'avatar',\n        src: user.avatarURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          'fontWeight': this.props.authedUser === user.id ? 'bold' : 'normal'\n        },\n        children: user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'question-icons',\n        children: !this.props.showVotes ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'btn',\n            children: [\" \", question.optionOne.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'btn',\n            children: [\" \", question.optionTwo.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this), \" \", !this.props.score ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'score',\n            children: [\" \", this.props.score, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 26\n        }, this) : this.state.showVotes && this.userHasVoted() ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'btn',\n              style: {\n                fontWeight: this.optionVoted('optionOne') ? 'bold' : 'normal'\n              },\n              children: [\" \", question.optionOne.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'numvoted',\n              children: [\" \", this.numPeopleVotedForOption(question, 'optionOne'), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'percentvoted',\n              children: [\" \", formatPercentage(this.numPeopleVotedForOption(question, 'optionOne') / questionScore(question))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'btn',\n            style: {\n              fontWeight: this.optionVoted('optionTwo') ? 'bold' : 'normal'\n            },\n            children: [\" \", question.optionTwo.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'numvoted',\n            children: [\" \", this.numPeopleVotedForOption(question, 'optionTwo'), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'percentvoted',\n            children: [\" \", formatPercentage(this.numPeopleVotedForOption(question, 'optionTwo') / questionScore(question))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn',\n            onClick: this.handleVote('optionOne'),\n            children: [\" \", question.optionOne.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn',\n            onClick: this.handleVote('optionTwo'),\n            children: [\" \", question.optionTwo.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), \" \", !this.props.score ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'score',\n            children: [\" \", this.props.score, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = ({\n  users,\n  questions,\n  authedUser\n}, {\n  questionId,\n  score,\n  showVotes\n}) => {\n  return {\n    question: questions[questionId],\n    user: users[questions[questionId].author],\n    authedUser,\n    authedUserQuestions: users[authedUser].questions,\n    score,\n    showVotes\n  };\n};\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/robinjack/Documents/Repositories/react-nanodegree/reactnd-would-you-rather/src/components/Question.js"],"names":["React","Component","connect","authedUser","Link","questionScore","formatPercentage","handleAddAnswer","Question","state","showVotes","userHasVoted","numPeopleVotedForOption","question","option","votes","length","voted","props","authedUserQuestions","filter","q","id","optionVoted","a","handleVote","e","console","log","preventDefault","questionId","dispatch","qid","answer","setState","render","user","avatarURL","name","optionOne","text","optionTwo","score","fontWeight","mapStateToProps","users","questions","author"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport authedUser from \"../reducers/authedUser\";\nimport {Link} from \"react-router-dom\";\nimport {questionScore, formatPercentage} from \"../utilities/questionUtilities\";\nimport {handleAddAnswer} from \"../actions/answers\";\n\n\nclass Question extends Component {\n\n    state = {\n        showVotes : false,\n        userHasVoted : false\n    }\n\n    numPeopleVotedForOption = (question, option) => {\n        return question[option].votes.length\n    }\n\n    userHasVoted = () => {\n        let voted = this.props.authedUserQuestions.filter((q) => q===this.props.question.id).length > 0\n        return voted\n    }\n\n    optionVoted = (option) => {\n        return this.props.question[option].votes.filter((a) => a === this.props.authedUser).length > 0\n    }\n\n    handleVote = (option) => {\n        return (e) => {\n            console.log(\"PROPS OF VOTING: \", this.props)\n        e.preventDefault()\n            const {questionId, authedUser, dispatch} = this.props\n\n            dispatch(handleAddAnswer(\n                { authedUser, qid: questionId, answer: option }\n            ))\n            this.setState({showVotes : true,\n            userHasVoted: true\n            })\n    }\n    }\n\n\n\n\n    render() {\n        const {user, question} = this.props\n        return (<Link to={`/question/${question.id}`} className={'question'}>\n            <img className={'avatar'} src={user.avatarURL}/>\n            <p style={{'fontWeight' : this.props.authedUser === user.id ? 'bold' : 'normal'}}>{user.name}</p>\n            <div className={'question-icons'}>\n                {\n                    !this.props.showVotes?\n\n                        (<div><div className={'btn'}> {question.optionOne.text}</div>\n                    <div className={'btn'} > {question.optionTwo.text}</div> {!this.props.score ? null :\n                        <div className={'score'}> {this.props.score} </div>\n\n                    } </div> ) :\n\n                    this.state.showVotes && this.userHasVoted()?\n\n                    <div><div>\n                        <div className={'btn'} style={{fontWeight: this.optionVoted('optionOne')? 'bold' : 'normal' }} > {question.optionOne.text}</div>\n                        <div className={'numvoted'}> {this.numPeopleVotedForOption(question, 'optionOne')} </div>\n                        <div className={'percentvoted'}> {formatPercentage(this.numPeopleVotedForOption(question, 'optionOne')\n                            / questionScore(question))}\n                        </div>\n                    </div>\n                        <div className={'btn'} style={{fontWeight: this.optionVoted('optionTwo')? 'bold' : 'normal' }}> {question.optionTwo.text}</div>\n                        <div className={'numvoted'}> {this.numPeopleVotedForOption(question, 'optionTwo')} </div>\n                        <div className={'percentvoted'}> {formatPercentage(this.numPeopleVotedForOption(question, 'optionTwo')\n                            / questionScore(question))}\n                        </div>\n\n                    </div> : <div><button className={'btn'} onClick={this.handleVote('optionOne')}> {question.optionOne.text}</button>\n                            <button className={'btn'} onClick={this.handleVote('optionTwo')}> {question.optionTwo.text}</button> {!this.props.score ? null :\n                            <div className={'score'}> {this.props.score} </div>\n\n                            } </div>\n                        }\n\n                    </div>\n\n        </Link>)\n    }\n\n}\n\nconst mapStateToProps = ({users, questions, authedUser}, {questionId, score, showVotes}) => {\n\n    return {\n        question: questions[questionId],\n        user: users[questions[questionId].author],\n        authedUser,\n        authedUserQuestions : users[authedUser].questions,\n        score,\n        showVotes\n    }\n}\n\nexport default connect(mapStateToProps)(Question)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/robinjack/Documents/Repositories/react-nanodegree/reactnd-would-you-rather/src/components/Question.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport authedUser from \"../reducers/authedUser\";\nimport { Link } from \"react-router-dom\";\nimport { questionScore, formatPercentage } from \"../utilities/questionUtilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Question extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.numPeopleVotedForOption = (question, option) => {\n      return question[option].votes.length;\n    };\n\n    this.userHasVoted = () => {\n      let voted = this.props.user.questions.filter(q => q == this.props.question.id).length > 0;\n      return voted;\n    };\n\n    this.vote = e => {\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    const {\n      user,\n      question\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/question/${question.id}`,\n      className: 'question',\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: 'avatar',\n        src: user.avatarURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          'fontWeight': this.props.authedUser === user.id ? 'bold' : 'normal'\n        },\n        children: user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'question-icons',\n        children: !this.props.showVotes ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn',\n            children: [\" \", question.optionOne.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 47\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn',\n            children: [\" \", question.optionTwo.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }, this), \" \", !this.props.score ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'score',\n            children: [\" \", this.props.score, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'btn',\n              \"font-weight\": this.userHasVoted() ? 'bold' : 'normal',\n              children: [\" \", question.optionOne.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'numvoted',\n              children: [\" \", this.numPeopleVotedForOption(question, 'optionOne'), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'percentvoted',\n              children: [\" \", formatPercentage(this.numPeopleVotedForOption(question, 'optionOne') / questionScore(question))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'btn',\n            \"font-weight\": this.userHasVoted() ? 'bold' : 'normal',\n            children: [\" \", question.optionTwo.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'numvoted',\n            children: [\" \", this.numPeopleVotedForOption(question, 'optionTwo'), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'percentvoted',\n            children: [\" \", formatPercentage(this.numPeopleVotedForOption(question, 'optionTwo') / questionScore(question))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = ({\n  users,\n  questions,\n  authedUser\n}, {\n  questionId,\n  score,\n  showVotes\n}) => {\n  return {\n    question: questions[questionId],\n    user: users[questions[questionId].author],\n    authedUser,\n    score,\n    showVotes\n  };\n};\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/robinjack/Documents/Repositories/react-nanodegree/reactnd-would-you-rather/src/components/Question.js"],"names":["React","Component","connect","authedUser","Link","questionScore","formatPercentage","Question","numPeopleVotedForOption","question","option","votes","length","userHasVoted","voted","props","user","questions","filter","q","id","vote","e","preventDefault","render","avatarURL","name","showVotes","optionOne","text","optionTwo","score","mapStateToProps","users","questionId","author"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport authedUser from \"../reducers/authedUser\";\nimport {Link} from \"react-router-dom\";\nimport {questionScore, formatPercentage} from \"../utilities/questionUtilities\";\n\n\nclass Question extends Component {\n\n    numPeopleVotedForOption = (question, option) => {\n        return question[option].votes.length\n    }\n\n    userHasVoted = () => {\n        let voted = this.props.user.questions.filter((q) => q==this.props.question.id).length > 0\n        return voted\n    }\n\n    vote = (e) => {\n        e.preventDefault()\n    }\n\n\n\n\n    render() {\n        const {user, question} = this.props\n        return (<Link to={`/question/${question.id}`} className={'question'}>\n            <img className={'avatar'} src={user.avatarURL}/>\n            <p style={{'fontWeight' : this.props.authedUser === user.id ? 'bold' : 'normal'}}>{user.name}</p>\n            <div className={'question-icons'}>\n                {!this.props.showVotes? (<div><button className={'btn'}> {question.optionOne.text}</button>\n                    <button className={'btn'}> {question.optionTwo.text}</button> {!this.props.score ? null :\n                        <div className={'score'}> {this.props.score} </div>\n\n                    } </div> ) :\n\n                    <div><div>\n                        <div className={'btn'} font-weight={this.userHasVoted()? 'bold' : 'normal' } > {question.optionOne.text}</div>\n                        <div className={'numvoted'}> {this.numPeopleVotedForOption(question, 'optionOne')} </div>\n                        <div className={'percentvoted'}> {formatPercentage(this.numPeopleVotedForOption(question, 'optionOne')\n                            / questionScore(question))}\n                        </div>\n                    </div>\n                        <div className={'btn'} font-weight={this.userHasVoted()? 'bold' : 'normal' }> {question.optionTwo.text}</div>\n                        <div className={'numvoted'}> {this.numPeopleVotedForOption(question, 'optionTwo')} </div>\n                        <div className={'percentvoted'}> {formatPercentage(this.numPeopleVotedForOption(question, 'optionTwo')\n                            / questionScore(question))}\n                        </div>\n\n                    </div>\n                        }\n\n                    </div>\n\n        </Link>)\n    }\n\n}\n\nconst mapStateToProps = ({users, questions, authedUser}, {questionId, score, showVotes}) => {\n    return {\n        question: questions[questionId],\n        user: users[questions[questionId].author],\n        authedUser,\n        score,\n        showVotes\n    }\n}\n\nexport default connect(mapStateToProps)(Question)"]},"metadata":{},"sourceType":"module"}
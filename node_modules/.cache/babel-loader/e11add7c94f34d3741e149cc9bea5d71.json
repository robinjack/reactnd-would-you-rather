{"ast":null,"code":"import { addQuestion, receiveQuestions, removeQuestion } from \"./questions\";\nimport { getInitialData, saveQuestion, saveQuestionAnswer } from \"../utilities/api\";\nimport { receiveUsers } from \"./users\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport function addAnswer(answer) {\n  return {\n    type: ADD_ANSWER,\n    answer\n  };\n}\nexport function handleAddAnswer(answer) {\n  return dispatch => {\n    return saveQuestionAnswer(answer).then(() => {\n      dispatch(addAnswer(answer));\n      return getInitialData().then(({\n        users,\n        questions\n      }) => {\n        dispatch(receiveQuestions(questions));\n        dispatch(receiveUsers(users));\n      });\n    }).catch(error => {\n      alert(\"There was an error: \", error);\n    });\n  };\n}","map":{"version":3,"sources":["/Users/robinjack/Documents/Repositories/react-nanodegree/reactnd-would-you-rather/src/actions/answers.js"],"names":["addQuestion","receiveQuestions","removeQuestion","getInitialData","saveQuestion","saveQuestionAnswer","receiveUsers","ADD_ANSWER","addAnswer","answer","type","handleAddAnswer","dispatch","then","users","questions","catch","error","alert"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,EAAuCC,cAAvC,QAA4D,aAA5D;AACA,SAAQC,cAAR,EAAwBC,YAAxB,EAAsCC,kBAAtC,QAA+D,kBAA/D;AACA,SAAQC,YAAR,QAA2B,SAA3B;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;AAEP,OAAO,SAASC,SAAT,CAAoBC,MAApB,EAA4B;AAC/B,SAAO;AAACC,IAAAA,IAAI,EAAEH,UAAP;AACPE,IAAAA;AADO,GAAP;AAEH;AAGD,OAAO,SAASE,eAAT,CAAyBF,MAAzB,EAAiC;AACpC,SAAQG,QAAD,IAAc;AACjB,WAAOP,kBAAkB,CAACI,MAAD,CAAlB,CAA2BI,IAA3B,CAAgC,MAAM;AACzCD,MAAAA,QAAQ,CAACJ,SAAS,CAACC,MAAD,CAAV,CAAR;AACA,aAAON,cAAc,GAAGU,IAAjB,CAAsB,CAAC;AAACC,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAD,KAAwB;AACjDH,QAAAA,QAAQ,CAACX,gBAAgB,CAACc,SAAD,CAAjB,CAAR;AACAH,QAAAA,QAAQ,CAACN,YAAY,CAACQ,KAAD,CAAb,CAAR;AAEH,OAJM,CAAP;AAIG,KANA,EAOFE,KAPE,CAQEC,KAAD,IAAW;AACPC,MAAAA,KAAK,CAAC,sBAAD,EAAyBD,KAAzB,CAAL;AACH,KAVF,CAAP;AAaH,GAdD;AAcG","sourcesContent":["import {addQuestion, receiveQuestions, removeQuestion} from \"./questions\";\nimport {getInitialData, saveQuestion, saveQuestionAnswer} from \"../utilities/api\";\nimport {receiveUsers} from \"./users\";\n\nexport const ADD_ANSWER = \"ADD_ANSWER\"\n\nexport function addAnswer (answer) {\n    return {type: ADD_ANSWER,\n    answer }\n}\n\n\nexport function handleAddAnswer(answer) {\n    return (dispatch) => {\n        return saveQuestionAnswer(answer).then(() => {\n            dispatch(addAnswer(answer))\n            return getInitialData().then(({users, questions}) => {\n                dispatch(receiveQuestions(questions))\n                dispatch(receiveUsers(users))\n\n            })})\n            .catch (\n                (error) => {\n                    alert(\"There was an error: \", error)\n                }\n            )\n\n    } }"]},"metadata":{},"sourceType":"module"}